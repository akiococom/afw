<?php
// vim: foldmethod=marker
/**
 *  Ethna_ActionForm.php
 *
 *  @author     Masaki Fujimoto <fujimoto@php.net>
 *  @license    http://www.opensource.org/licenses/bsd-license.php The BSD License
 *  @package    Ethna
 *  @version    $Id: Ethna_ActionForm.php,v 1.30 2006/06/06 06:45:17 ichii386 Exp $
 */

/** 腟??????鐔????? ???????? */
define('FILTER_HW', 'numeric_zentohan,alphabet_zentohan,ltrim,rtrim,ntrim');

/** 腟??????鐔????? ??????? */
define('FILTER_FW', 'kana_hantozen,ntrim');


// {{{ Ethna_ActionForm
/**
 *  ?????羶????羹??????????????
 *
 *  @author     Masaki Fujimoto <fujimoto@php.net>
 *  @access     public
 *  @package    Ethna
 */
class Ethna_ActionForm
{
    /**#@+
     *  @access private
     */

    /** @var    array   ?????????????????????????) */
    var $form_template = array();

    /** @var    array   ?????????????? */
    var $form = array();

    /** @var    array   ????????? */
    var $form_vars = array();

    /** @var    array   ???????絎???羶????羇獅??腟?? */
    var $app_vars = array();

    /** @var    array   ???????絎???羶????羇獅??腟??????????藉?絎????????) */
    var $app_ne_vars = array();

    /** @var    object  Ethna_ActionError   ?????羶????羹??????????????????? */
    var $action_error;

    /** @var    object  Ethna_ActionError   ?????羶????羹???????????????????(????ュ葦) */
    var $ae;

    /** @var    object  Ethna_I18N  i18n???????????? */
    var $i18n;

    /** @var    object  Ethna_Logger    ????????????????? */
    var $logger;

    /** @var    array   ????????腟??????? */
    var $def = array('name', 'required', 'max', 'min', 'regexp', 'custom', 'filter', 'form_type', 'type');

    /** @var    bool    ?顔???臀???綣延????????? */
    var $force_validate_plus = false;

    /**#@-*/

    /**
     *  Ethna_ActionForm?????藉???羹??羹??藉???????
     *
     *  @access public
     *  @param  object  Ethna_Controller    &$controller    controller????????????
     */
    function Ethna_ActionForm(&$controller)
    {
        $this->action_error = $controller->getActionError();
        $this->ae = $this->action_error;
        $this->i18n = $controller->getI18N();
        $this->logger = $controller->getLogger();

        if (isset($_SERVER['REQUEST_METHOD']) == false) {
            return;
        }

        // ??????????????羹????????????茣??
        $this->form_template = $this->_setFormTemplate($this->form_template);

        // ???????????????????腟?
        $this->_setFormDef();

        // ????????臀
        foreach ($this->form as $name => $value) {
            foreach ($this->def as $k) {
                if (isset($value[$k]) == false) {
                    $this->form[$name][$k] = null;
                }
            }
        }
    }

    /**
     *  ??????????????????腑???R)
     *
     *  @access public
     *  @param  string  $name   ????????????????
     *  @return mixed   ?????????
     */
    function get($name)
    {
        if (isset($this->form_vars[$name])) {
            return $this->form_vars[$name];
        }
        return null;
    }

    /**
     *  ???????????????????膩??????
     *
     *  @access public
     *  @param  string  $name   ??膩????????????????(?????null??????????????????膩??????)
     *  @return array   ??????????????
     */
    function getDef($name = null)
    {
        if (is_null($name)) {
            return $this->form;
        }

        if (array_key_exists($name, $this->form) == false) {
            return null;
        } else {
            return $this->form[$name];
        }
    }

    /**
     *  ????????????鐚??????????膩??????
     *
     *  @access public
     *  @param  string  $name   ????????????????
     *  @return mixed   ?????????????鐚??????
     */
    function getName($name)
    {
        if (isset($this->form[$name]) == false) {
            return null;
        }
        if (isset($this->form[$name]['name']) && $this->form[$name]['name'] != null) {
            return $this->form[$name]['name'];
        }

        // try message catalog
        return $this->i18n->get($name);
    }

    /**
     *  ?????????????膀?鐚???????????????????????????????????????鐔???????羹???????????
     *
     *  @access public
     */
    function setFormVars()
    {
        if (strcasecmp($_SERVER['REQUEST_METHOD'], 'post') == 0) {
            $http_vars = $_POST;
        } else {
            $http_vars = $_GET;
        }

        foreach ($this->form as $name => $def) {
            $type = is_array($def['type']) ? $def['type'][0] : $def['type'];
            if ($type == VAR_TYPE_FILE) {
                // ???鐚?????????膺??

                // ????????鐚?????
                if (isset($_FILES[$name]) == false || is_null($_FILES[$name])) {
                    $this->form_vars[$name] = null;
                    continue;
                }

                // ????臀????????
                if (is_array($def['type'])) {
                    if (is_array($_FILES[$name]['tmp_name']) == false) {
                        $this->handleError($name, E_FORM_WRONGTYPE_ARRAY);
                        $this->form_vars[$name] = null;
                        continue;
                    }
                } else {
                    if (is_array($_FILES[$name]['tmp_name'])) {
                        $this->handleError($name, E_FORM_WRONGTYPE_SCALAR);
                        $this->form_vars[$name] = null;
                        continue;
                    }
                }

                $files = null;
                if (is_array($def['type'])) {
                    $files = array();
                    // ???鐚???????????絽????臀????
                    foreach (array_keys($_FILES[$name]['name']) as $key) {
                        $files[$key] = array();
                        $files[$key]['name'] = $_FILES[$name]['name'][$key];
                        $files[$key]['type'] = $_FILES[$name]['type'][$key];
                        $files[$key]['size'] = $_FILES[$name]['size'][$key];
                        $files[$key]['tmp_name'] = $_FILES[$name]['tmp_name'][$key];
                        $files[$key]['error'] = $_FILES[$name]['error'][$key];
                    }
                } else {
                    $files = $_FILES[$name];
                }

                // ?????????羹???????
                $this->form_vars[$name] = $files;

            } else {
                // ???鐚?????????????膺??

                // ????????鐚?????
                if (isset($http_vars[$name]) == false || is_null($http_vars[$name])) {
                    $this->form_vars[$name] = null;
                    if (isset($http_vars["{$name}_x"]) && isset($http_vars["{$name}_y"])) {
                        // 膀???????臀???????????
                        $this->form_vars[$name] = $http_vars["{$name}_x"];
                    }
                    continue;
                }

                // ????臀????????
                if (is_array($def['type'])) {
                    if (is_array($http_vars[$name]) == false) {
                        // ??????????????????????????????藉?????????????藉??
                        // TODO: 膣??臀??????????????腟俄??????
                        $this->handleError($name, E_FORM_WRONGTYPE_ARRAY);
                        $this->form_vars[$name] = null;
                        continue;
                    }
                } else {
                    if (is_array($http_vars[$name])) {
                        $this->handleError($name, E_FORM_WRONGTYPE_SCALAR);
                        $this->form_vars[$name] = null;
                        continue;
                    }
                }

                // ?????????羹???????
                $this->form_vars[$name] = $http_vars[$name];
            }
        }
    }

    /**
     *  ????????????????????腑???W)
     *
     *  @access public
     *  @param  string  $name   ????????????????
     *  @param  string  $value  ?????????
     */
    function set($name, $value)
    {
        $this->form_vars[$name] = $value;
    }

    /**
     *  ?????????????????????????
     *
     *  @access public
     *  @param  string  $name   ??????????????????(?????null????????????????????????)
     *  @param  array   $value  ??????????????????????
     *  @return array   ??????????????
     */
    function setDef($name, $value)
    {
        if (is_null($name)) {
            $this->form = $value;
        }

        $this->form[$name] = $value;
    }

    /**
     *  ??????????????????????????
     *
     *  @access public
     *  @param  bool    $escape HTML???藉?絎??????????true:???藉?絎????????)
     *  @return array   ??????????????筝?????????
     */
    function &getArray($escape = true)
    {
        $retval = array();

        $this->_getArray($this->form_vars, $retval, $escape);

        return $retval;
    }

    /**
     *  ???????絎???羶????羇獅??腟???????????腑???R)
     *
     *  @access public
     *  @param  string  $name   ???
     *  @return mixed   ???????絎???羶????羇獅??腟??
     */
    function getApp($name)
    {
        if (isset($this->app_vars[$name]) == false) {
            return null;
        }
        return $this->app_vars[$name];
    }

    /**
     *  ???????絎???羶????羇獅??腟???????????腑???W)
     *
     *  @access public
     *  @param  string  $name   ???
     *  @param  mixed   $value  ?
     */
    function setApp($name, $value)
    {
        $this->app_vars[$name] = $value;
    }

    /**
     *  ???????絎???羶????羇獅??腟???????????????????
     *
     *  @access public
     *  @param  boolean $escape HTML???藉?絎??????????true:???藉?絎????????)
     *  @return array   ??????????????筝?????????
     */
    function &getAppArray($escape = true)
    {
        $retval = array();

        $this->_getArray($this->app_vars, $retval, $escape);

        return $retval;
    }

    /**
     *  ???????絎???羶????羇獅??腟??????????藉?絎????????)???????腑???R)
     *
     *  @access public
     *  @param  string  $name   ???
     *  @return mixed   ???????絎???羶????羇獅??腟??
     */
    function getAppNE($name)
    {
        if (isset($this->app_ne_vars[$name]) == false) {
            return null;
        }
        return $this->app_ne_vars[$name];
    }

    /**
     *  ???????絎???羶????羇獅??腟??????????藉?絎????????)???????腑???W)
     *
     *  @access public
     *  @param  string  $name   ???
     *  @param  mixed   $value  ?
     */
    function setAppNE($name, $value)
    {
        $this->app_ne_vars[$name] = $value;
    }

    /**
     *  ???????絎???羶????羇獅??腟??????????藉?絎????????)???????????????
     *
     *  @access public
     *  @param  boolean $escape HTML???藉?絎??????????true:???藉?絎????????)
     *  @return array   ??????????????筝?????????
     */
    function &getAppNEArray($escape = false)
    {
        $retval = array();

        $this->_getArray($this->app_ne_vars, $retval, $escape);

        return $retval;
    }

    /**
     *  ???????????????????????(????????)
     *
     *  @access private
     *  @param  array   &$vars      ????????(???)??????
     *  @param  array   &$retval    ????????????????
     *  @param  bool    $escape     HTML???藉?絎??????????true:???藉?絎????????)
     */
    function _getArray(&$vars, &$retval, $escape)
    {
        foreach (array_keys($vars) as $name) {
            if (is_array($vars[$name])) {
                $retval[$name] = array();
                $this->_getArray($vars[$name], $retval[$name], $escape);
            } else {
                $retval[$name] = $escape ? htmlspecialchars($vars[$name], ENT_QUOTES) : $vars[$name];
            }
        }
    }

    /**
     *  ?顔???臀???綣延???????????????膩??????
     *
     *  @access public
     *  @return bool    true:?顔???臀???綣延?????腟遵勝???????????????网????????膺??????_validatePlus()???????????????) false:?顔???臀???絎???膓ｆ??
     */
    function isForceValidatePlus()
    {
        return $this->force_validate_plus;
    }

    /**
     *  ?顔???臀???綣延?????????????????????
     *
     *  @access public
     *  @param  $force_validate_plus    ?顔???臀???綣延?????????
     */
    function setForceValidatePlus($force_validate_plus)
    {
        $this->force_validate_plus = $force_validate_plus;
    }

    /**
     *  ????????????????鐚??膣?????
     *
     *  @access public
     *  @return int     ?网????????????????
     */
    function validate()
    {
        foreach ($this->form as $name => $def) {
            // ????????????????
            unset($form_vars);
            if (is_null($this->form_vars[$name])) {
                $form_vars = array();
            } else if (is_array($def['type'])) {
                $form_vars = $this->form_vars[$name];
            } else {
                $form_vars = array(& $this->form_vars[$name]);
            }

            // ???鐚?????????膺????????????alid????required?鐚??????????????
            // TODO: ???????????腟?????????????????
            $type = is_array($def['type']) ? $def['type'][0] : $def['type'];
            $valid_keys = array();
            $required_num = max(1, $type == VAR_TYPE_FILE ? 1 : count($form_vars));

            foreach (array_keys($form_vars) as $key) {
                // filter
                if ($type != VAR_TYPE_FILE) {
                    $form_vars[$key] =
                        $this->_filter($form_vars[$key], $def['filter']);
                }

                // ??????ュ??????????
                if ($type == VAR_TYPE_FILE) {
                    if ($form_vars[$key]['size'] == 0
                        || is_uploaded_file($form_vars[$key]['tmp_name']) == false) {
                        continue;
                    }
                } else {
                    if (is_scalar($form_vars[$key]) == false
                        || strlen($form_vars[$key]) == 0) {
                        continue;
                    }
                }

                // valid_keys ?????
                $valid_keys[] = $key;

                // _validate
                $this->_validate($name, $form_vars[$key], $def);
            }

            // required ??????
            if ($def['required'] && (count($valid_keys) < $required_num)) {
                $this->handleError($name, E_FORM_REQUIRED);
                continue;
            }

            // ???藉?絽???鐚??膣??????????
            // TODO: ???????藉???????????臀??????????????
            if ($def['custom'] != null && is_array($def['type'])) {
                $this->_validateCustom($def['custom'], $name);
            }
        }

        if ($this->ae->count() == 0 || $this->isForceValidatePlus()) {
            // ?顔???臀?????鐚??膣?????
            $this->_validatePlus();
        }

        return $this->ae->count();
    }

    /**
     *  ?????????鐚??膣?????(?????????
     *
     *  @access public
     *  @param  string  $name   ??????????????
     *  @return array   ???????????鐚??????????????????????鐚????膺????ull)
     */
    function check($name)
    {
        if (is_null($this->form_vars[$name]) || $this->form_vars[$name] === "") {
            return null;
        }

        // Ethna_Backend????腟?
        $c = Ethna_Controller::getInstance();
        $this->backend = $c->getBackend();

        return to_array($this->form_vars[$name]);
    }

    /**
     *  ?????????鐚??膣?????: 臀?????腟????腟??
     *
     *  @access public
     *  @param  string  $name   ??????????????
     *  @return object  Ethna_Error ??????????????????(?????????鐚????膺????ull)
     */
    function &checkVendorChar($name)
    {
        $null = null;
        $string = $this->form_vars[$name];

        for ($i = 0; $i < strlen($string); $i++) {
            /* JIS13?????絽??????? */
            $c = ord($string{$i});
            if ($c < 0x80) {
                /* ASCII */
            } else if ($c == 0x8e) {
                /* ???????? */
                $i++;
            } else if ($c == 0x8f) {
                /* JIS X 0212 */
                $i += 2;
            } else if ($c == 0xad || ($c >= 0xf9 && $c <= 0xfc)) {
                /* IBM??????腟?? / NEC?緇??IBM??????腟?? */
                return $this->ae->add($name, '{form}??????腟????腟?????????????????????', E_FORM_INVALIDCHAR);
            } else {
                $i++;
            }
        }

        return $null;
    }

    /**
     *  ?????????鐚??膣?????: bool?
     *
     *  @access public
     *  @param  string  $name   ??????????????
     *  @return object  Ethna_Error ??????????????????(?????????鐚????膺????ull)
     */
    function &checkBoolean($name)
    {
        $null = null;
        $form_vars = $this->check($name);

        if ($form_vars == null) {
            return $null;
        }

        foreach ($form_vars as $v) {
            if ($v === "") {
                continue;
            }
            if ($v != "0" && $v != "1") {
                return $this->ae->add($name, '{form}??臀????????????????????', E_FORM_INVALIDCHAR);
            }
        }

        return $null;
    }

    /**
     *  ?????????鐚??膣?????: ?鐚????????????
     *
     *  @access public
     *  @param  string  $name   ??????????????
     *  @return object  Ethna_Error ??????????????????(?????????鐚????膺????ull)
     */
    function &checkMailaddress($name)
    {
        $null = null;
        $form_vars = $this->check($name);

        if ($form_vars == null) {
            return $null;
        }

        foreach ($form_vars as $v) {
            if ($v === "") {
                continue;
            }
            if (Ethna_Util::checkMailaddress($v) == false) {
                return $this->ae->add($name, '{form}??臀????????????????????', E_FORM_INVALIDCHAR);
            }
        }

        return $null;
    }

    /**
     *  ?????????鐚??膣?????: URL
     *
     *  @access public
     *  @param  string  $name   ??????????????
     *  @return object  Ethna_Error ??????????????????(?????????鐚????膺????ull)
     */
    function &checkURL($name)
    {
        $null = null;
        $form_vars = $this->check($name);

        if ($form_vars == null) {
            return $null;
        }

        foreach ($form_vars as $v) {
            if ($v === "") {
                continue;
            }
            if (preg_match('/^(http:\/\/|https:\/\/|ftp:\/\/)/', $v) == 0) {
                return $this->ae->add($name, '{form}??臀????????????????????', E_FORM_INVALIDCHAR);
            }
        }

        return $null;
    }

    /**
     *  ?????????????hidden?絽????????????
     *
     *  @access public
     *  @param  array   $include_list   ????????腟????????膺??????????????????????????????????????絽??腟俄????????
     *  @param  array   $exclude_list   ????????腟????????膺????????????????????????????????????????絽??腟俄????????
     *  @return string  hidden?絽???????????顔????????HTML
     */
    function getHiddenVars($include_list = null, $exclude_list = null)
    {
        $hidden_vars = "";
        foreach ($this->form as $key => $value) {
            if (is_array($include_list) == true && in_array($key, $include_list) == false) {
                continue;
            }
            if (is_array($exclude_list) == true && in_array($key, $exclude_list) == true) {
                continue;
            }

            $form_value = $this->form_vars[$key];
            if (is_array($form_value) == false) {
                $form_value = array($form_value);
                $form_array = false;
            } else {
                $form_array = true;
            }
            foreach ($form_value as $k => $v) {
                if ($form_array) {
                    $form_name = "$key" . "[$k]";
                } else {
                    $form_name = $key;
                }
                $hidden_vars .= sprintf("<input type=\"hidden\" name=\"%s\" value=\"%s\" />\n",
                    $form_name, htmlspecialchars($v, ENT_QUOTES));
            }
        }
        return $hidden_vars;
    }

    /**
     *  ??????????????????????綣??????????
     *
     *  @access public
     *  @param  string      $name   ??????????????
     *  @param  int         $code   ???????羹?????
     */
    function handleError($name, $code)
    {
        $def = $this->getDef($name);

        // ?????箙????????????鐚????腑????
        $code_map = array(
            E_FORM_REQUIRED     => 'required_error',
            E_FORM_WRONGTYPE_SCALAR => 'type_error',
            E_FORM_WRONGTYPE_ARRAY  => 'type_error',
            E_FORM_WRONGTYPE_INT    => 'type_error',
            E_FORM_WRONGTYPE_FLOAT  => 'type_error',
            E_FORM_WRONGTYPE_DATETIME   => 'type_error',
            E_FORM_WRONGTYPE_BOOLEAN    => 'type_error',
            E_FORM_MIN_INT      => 'min_error',
            E_FORM_MIN_FLOAT    => 'min_error',
            E_FORM_MIN_DATETIME => 'min_error',
            E_FORM_MIN_FILE     => 'min_error',
            E_FORM_MIN_STRING   => 'min_error',
            E_FORM_MAX_INT      => 'max_error',
            E_FORM_MAX_FLOAT    => 'max_error',
            E_FORM_MAX_DATETIME => 'max_error',
            E_FORM_MAX_FILE     => 'max_error',
            E_FORM_MAX_STRING   => 'max_error',
            E_FORM_REGEXP       => 'regexp_error',
        );
        if (array_key_exists($code_map[$code], $def)) {
            $this->ae->add($name, $def[$code_map[$code]], $code);
            return;
        }

        if ($code == E_FORM_REQUIRED) {
            switch ($def['form_type']) {
            case FORM_TYPE_TEXT:
            case FORM_TYPE_PASSWORD:
            case FORM_TYPE_TEXTAREA:
            case FORM_TYPE_SUBMIT:
                $message = "{form}???????????????";
                break;
            case FORM_TYPE_SELECT:
            case FORM_TYPE_RADIO:
            case FORM_TYPE_CHECKBOX:
            case FORM_TYPE_FILE:
                $message = "{form}???緇???????????";
                break;
            default:
                $message = "{form}???????????????";
                break;
            }
        } else if ($code == E_FORM_WRONGTYPE_SCALAR) {
            $message = "{form}?????藉?????綣??????????????????";
        } else if ($code == E_FORM_WRONGTYPE_ARRAY) {
            $message = "{form}???????????????????????";
        } else if ($code == E_FORM_WRONGTYPE_INT) {
            $message = "{form}???????(?茣??????????????????";
        } else if ($code == E_FORM_WRONGTYPE_FLOAT) {
            $message = "{form}???????(腟?????????????????";
        } else if ($code == E_FORM_WRONGTYPE_DATETIME) {
            $message = "{form}??????????????????????";
        } else if ($code == E_FORM_WRONGTYPE_BOOLEAN) {
            $message = "{form}??????????????羂?????????????";
        } else if ($code == E_FORM_MIN_INT) {
            $this->ae->add($name, "{form}????d膀????????(?茣??????????????????", $code, $def['min']);
            return;
        } else if ($code == E_FORM_MIN_FLOAT) {
            $this->ae->add($name, "{form}????f膀????????(腟?????????????????", $code, $def['min']);
            return;
        } else if ($code == E_FORM_MIN_DATETIME) {
            $this->ae->add($name, "{form}????s膀????????????????????????", $code, $def['min']);
            return;
        } else if ($code == E_FORM_MIN_FILE) {
            $this->ae->add($name, "{form}????dKB膀????????鐚??????????腟??????????", $code, $def['min']);
            return;
        } else if ($code == E_FORM_MIN_STRING) {
            $this->ae->add($name, "{form}???????%d??腟??膀???(????%d??腟??膀???)?????????????", $code, intval($def['min']/2), $def['min']);
            return;
        } else if ($code == E_FORM_MAX_INT) {
            $this->ae->add($name, "{form}????d膀????????(?茣??????????????????", $code, $def['max']);
            return;
        } else if ($code == E_FORM_MAX_FLOAT) {
            $this->ae->add($name, "{form}????f膀????????(腟?????????????????", $code, $def['max']);
            return;
        } else if ($code == E_FORM_MAX_DATETIME) {
            $this->ae->add($name, "{form}????s膀????????????????????????", $code, $def['max']);
            return;
        } else if ($code == E_FORM_MAX_FILE) {
            $this->ae->add($name, "{form}????dKB膀????????鐚??????????腟??????????", $code, $def['max']);
            return;
        } else if ($code == E_FORM_MAX_STRING) {
            $this->ae->add($name, "{form}?????%d??腟??膀???(????%d??腟??膀???)???????????????", $code, intval($def['max']/2), $def['max']);
            return;
        } else if ($code == E_FORM_REGEXP) {
            $message = "{form}??臀????????????????????";
        }

        $this->ae->add($name, $message, $code);
    }

    /**
     *  ?????箙??????????鐚??膣?????(????????????????鐔????????????)
     *
     *  @access protected
     */
    function _validatePlus()
    {
    }

    /**
     *  ????????????????鐚??膣?????(腟?膀?
     *
     *  @access private
     *  @param  string  $name       ??????????????
     *  @param  mixed   $var        ????????????????????????????莖∵??
     *  @param  array   $def        ??????????????
     *  @param  bool    $test       ??????????????????????????????true:????????????)
     *  @return bool    true:臀??綛肢???膀?? false:?????
     */
    function _validate($name, $var, $def, $test = false)
    {
        $type = is_array($def['type']) ? $def['type'][0] : $def['type'];

        // type
        if ($type == VAR_TYPE_INT) {
            if (!preg_match('/^-?\d+$/', $var)) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_WRONGTYPE_INT);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_FLOAT) {
            if (!preg_match('/^-?\d+$/', $var) && !preg_match('/^-?\d+\.\d+$/', $var)) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_WRONGTYPE_FLOAT);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_DATETIME) {
            $r = strtotime($var);
            if ($r == -1 || $r === false) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_WRONGTYPE_DATETIME);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_BOOLEAN) {
            if ($var != "1" && $var != "0") {
                if ($test == false) {
                    $this->handleError($name, E_FORM_WRONGTYPE_BOOLEAN);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_STRING) {
            // nothing to do
        } else if ($type == VAR_TYPE_FILE) {
            // nothing to do
        }

        // min
        if ($type == VAR_TYPE_INT) {
            if (!is_null($def['min']) && $var < $def['min']) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_MIN_INT);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_FLOAT) {
            if (!is_null($def['min']) && $var < $def['min']) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_MIN_FLOAT);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_DATETIME) {
            if (!is_null($def['min'])) {
                $t_min = strtotime($def['min']);
                $t_var = strtotime($var);
                if ($t_var < $t_min) {
                    if ($test == false) {
                        $this->handleError($name, E_FORM_MIN_DATETIME);
                    }
                }
                return false;
            }
        } else if ($type == VAR_TYPE_FILE) {
            if (!is_null($def['min'])) {
                $st = @stat($var['tmp_name']);
                if ($st[7] < $def['min'] * 1024) {
                    if ($test == false) {
                        $this->handleError($name, E_FORM_MIN_FILE);
                    }
                    return false;
                }
            }
        } else {
            if (!is_null($def['min']) && strlen($var) < $def['min']) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_MIN_STRING);
                }
                return false;
            }
        }

        // max
        if ($type == VAR_TYPE_INT) {
            if (!is_null($def['max']) && $var > $def['max']) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_MAX_INT);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_FLOAT) {
            if (!is_null($def['max']) && $var > $def['max']) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_MAX_FLOAT);
                }
                return false;
            }
        } else if ($type == VAR_TYPE_DATETIME) {
            if (!is_null($def['max'])) {
                $t_min = strtotime($def['max']);
                $t_var = strtotime($var);
                if ($t_var > $t_min) {
                    if ($test == false) {
                        $this->handleError($name, E_FORM_MAX_DATETIME);
                    }
                }
                return false;
            }
        } else if ($type == VAR_TYPE_FILE) {
            if (!is_null($def['max'])) {
                $st = @stat($var['tmp_name']);
                if ($st[7] > $def['max'] * 1024) {
                    if ($test == false) {
                        $this->handleError($name, E_FORM_MAX_FILE);
                    }
                    return false;
                }
            }
        } else {
            if (!is_null($def['max']) && strlen($var) > $def['max']) {
                if ($test == false) {
                    $this->handleError($name, E_FORM_MAX_STRING);
                }
                return false;
            }
        }

        // regexp
        if ($type != VAR_TYPE_FILE && $def['regexp'] != null && strlen($var) > 0
            && preg_match($def['regexp'], $var) == 0) {
            if ($test == false) {
                $this->handleError($name, E_FORM_REGEXP);
            }
            return false;
        }

        // custom (TODO: respect $test flag)
        if ($def['custom'] != null) {
            if (isset($this->form[$name]['type']) && is_array($this->form[$name]['type']) == false) {
                $this->_validateCustom($def['custom'], $name);
            } else {
                // ??????腟????膺?????????膈?????????藉?絽???鐚??膣???????腟????????????藉??????
            }
        }

        return true;
    }

    /**
     *  ???藉?絽???????????鐚??膣???????腟???????
     *
     *  @access protected
     *  @param  string  $method_list    ???藉?絽???鐚??膣???????(???羹?????????)
     *  @param  string  $name           ??????????????
     */
    function _validateCustom($method_list, $name)
    {
        $method_list = preg_split('/\s*,\s*/', $method_list, -1, PREG_SPLIT_NO_EMPTY);
        if (is_array($method_list) == false) {
            return;
        }
        foreach ($method_list as $method) {
            $this->$method($name);
        }
    }

    /**
     *  ???????????????????鐔????絽??????????
     *
     *  @access private
     *  @param  mixed   $value  ?????????
     *  @param  int     $filter ???鐔????羂???
     *  @return mixed   膣?????????
     */
    function _filter($value, $filter)
    {
        if (is_null($filter)) {
            return $value;
        }

        foreach (preg_split('/\s*,\s*/', $filter) as $f) {
            $method = sprintf('_filter_%s', $f);
            if (method_exists($this, $method) == false) {
                $this->logger->log(LOG_WARNING, 'filter method is not defined [%s]', $method);
                continue;
            }
            $value = $this->$method($value);
        }

        return $value;
    }

    /**
     *  ?????????????????鐔????? ????????->?????????
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_alnum_zentohan($value)
    {
        return mb_convert_kana($value, "a");
    }

    /**
     *  ?????????????????鐔????? ??????->???????
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_numeric_zentohan($value)
    {
        return mb_convert_kana($value, "n");
    }

    /**
     *  ?????????????????鐔????? ??????->???????
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_alphabet_zentohan($value)
    {
        return mb_convert_kana($value, "r");
    }

    /**
     *  ?????????????????鐔????? 膓??????
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_ltrim($value)
    {
        return ltrim($value);
    }

    /**
     *  ?????????????????鐔????? ????????
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_rtrim($value)
    {
        return rtrim($value);
    }

    /**
     *  ?????????????????鐔????? NULL(0x00)???
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_ntrim($value)
    {
        return str_replace("\x00", "", $value);
    }

    /**
     *  ?????????????????鐔????? ????????->???????
     *
     *  @access protected
     *  @param  mixed   $value  ?????????
     *  @return mixed   膣?????????
     */
    function _filter_kana_hantozen($value)
    {
        return mb_convert_kana($value, "K");
    }

    /**
     *  ??????????????????羹???????????????????
     *
     *  @access protected
     *  @param  array   $form_template  ??????????????羹?????????
     *  @return array   ??????????????羹?????????
     */
    function _setFormTemplate($form_template)
    {
        return $form_template;
    }

    /**
     *  ?????????????????????????
     *
     *  @access protected
     */
    function _setFormDef()
    {
        foreach ($this->form as $key => $value) {
            if (array_key_exists($key, $this->form_template) && is_array($this->form_template)) {
                foreach ($this->form_template[$key] as $def_key => $def_value) {
                    if (array_key_exists($def_key, $value) == false) {
                        $this->form[$key][$def_key] = $def_value;
                    }
                }
            }
        }
    }
}
// }}}
?>
